import React, { useState } from "react";
import { Button, Card, Spinner } from "react-bootstrap";
import classNames from "classnames";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";

import { GitHubRepoId } from "../../../common/types/github-types";
import ApiEndpoints from "../../../common/api-endpoints";
import ApiResponses from "../../../common/api-responses";
import ApiRequests from "../../../common/api-requests";
import DataFetcher from "../../components/data-fetcher";
import { ExternalLink } from "../../components/external-link";
import SetupPageHeader from "./setup-header";
import BtnBody from "../../components/fa-btn-body";
import { joinList, getFriendlyDateTime } from "../../../common/common-util";
import { fetchJSON } from "../../util/client-util";
import SubmissionCard from "../../components/submission-card";

async function submitCreateSecrets(reqBody: ApiRequests.CreateActionsSecrets): Promise<ApiResponses.Result> {
  try {
    const res = await fetchJSON<ApiRequests.CreateActionsSecrets, ApiResponses.RepoSecretsCreationResult>(
      "POST",
      ApiEndpoints.App.Repos.Secrets.path,
      reqBody,
    );

    return {

    };
  }
  catch (err) {
    return {
      success: false,
      message: err.message,
    };
  }
}

type RepoCheckedState = GitHubRepoId & {
  isChecked: boolean,
};

type RepoCheckedStates = {
  initialized?: boolean,
  repos: RepoCheckedState[],
  // [key: number]: boolean,
};

export default function SelectReposPage(): JSX.Element {

  const [ checkedStates, setCheckedStates ] = useState<RepoCheckedStates>({ repos: [] });
  const [ createSATokens, setCreateSATokens ] = useState(true);
  const createSATokensId = "create-tokens-checkbox";

  const [ canProceed, setCanProceed ] = useState(false);

  /*
    const checkedRepos: GitHubRepoId[] = checkedStates.repos
  .filter((repo) => repo.isChecked)
  .map((repo) => {
    return {
      id: repo.id,
      name: repo.name,
      owner: repo.owner,
    };
  });

const result = await submitCreateSecrets({
  createSATokens,
  repos: checkedRepos,
});
  */

  return (
    <React.Fragment>
      <SetupPageHeader pageIndex={2} canProceed={canProceed} />
      <Card>
        <Card.Body>
          <p>
            This step connects GitHub repositories to your OpenShift cluster by
            creating <ExternalLink href="https://docs.github.com/en/actions/reference/encrypted-secrets">
              encrypted secrets
            </ExternalLink> in
            your repositories which you can then reference in your workflows.
          </p>
          <p>
            Select the repositories from which {"you'd"} like to be able to log in to this OpenShift cluster.
          </p>
        </Card.Body>
      </Card>

      <DataFetcher type="api" endpoint={ApiEndpoints.App.Repos.Secrets}
        loadingDisplay={
          <Card.Body className="p-3"><Spinner animation="border" variant="primary"/></Card.Body>
        }
      >
        {
          (repoSecrets: ApiResponses.RepoSecrets): JSX.Element => (
            <RepoWithSecretsBody
              reposWithSecrets={repoSecrets}
              checkedStates={checkedStates}
              setCheckedStates={setCheckedStates}
            />
          )
        }
      </DataFetcher>

      <Card>
        <Card.Title>
          Create Service Account Tokens
        </Card.Title>
        <Card.Body>
          <p>
            It is recommended to create a new Service Account Token for each repository that you will connect.
          </p>
          <p>
            This way, you can revoke a single {`repository's`} access by deleting its token without affecting other repositories.
          </p>
          <div className="pl-1">
            <input type="checkbox" checked={createSATokens} id={createSATokensId} onChange={(e) => setCreateSATokens(e.currentTarget.checked)}/>
            <label htmlFor={createSATokensId} className="b clickable">Create Service Account Tokens</label>
          </div>
        </Card.Body>
      </Card>

      <SubmissionCard
        title="Create Secrets"
        btnLabel="Create Secrets"
        onSubmit={async () => {
          submitCreateSecrets();
        }}
        postSubmit={(result) => setCanProceed(result.success)}
      />
    </React.Fragment>
  );
}

function RepoWithSecretsBody({
  reposWithSecrets,
  checkedStates,
  setCheckedStates,
}: {
  reposWithSecrets: ApiResponses.RepoSecrets,
  checkedStates: RepoCheckedStates,
  setCheckedStates: React.Dispatch<React.SetStateAction<RepoCheckedStates>>,
}): JSX.Element {
  if (!checkedStates.initialized) {
    const repos = reposWithSecrets.repos.map((repoWithSecrets): RepoCheckedState => {
      return {
        id: repoWithSecrets.repo.id,
        owner: repoWithSecrets.repo.owner.login,
        name: repoWithSecrets.repo.name,
        isChecked: true,
      };
    });

    const checkedStatesInitial: RepoCheckedStates = {
      initialized: true,
      repos,
    };

    setCheckedStates(checkedStatesInitial);
  }

  function setChecked(repoId: number, checked: boolean) {
    setCheckedStates({
      ...checkedStates,
      [repoId]: checked,
    });
  }

  function setAllChecked(newChecked: boolean): void {
    const stateCopy = { ...checkedStates };
    stateCopy.repos = stateCopy.repos.map((repo) => ({ ...repo, isChecked: newChecked }));
    setCheckedStates(stateCopy);
  }

  const defaultSecretNames = Object.values(reposWithSecrets.defaultSecretNames);

  return (
    <React.Fragment>
      <Card>
        <Card.Title>
          <div>
            Repositories
          </div>
          <div className="ml-auto">
            <div>
              <Button variant="outline-light">
                <ExternalLink
                  href={reposWithSecrets.urls.installationSettings}
                  title="Edit Installation"
                >
                  <BtnBody icon="cog" text="Edit Installation" />
                </ExternalLink>
              </Button>
              <Button variant="outline-light" className="ml-2"
                onClick={() => window.location.reload()}
              >
                <BtnBody icon="sync-alt" text="Reload"/>
              </Button>
            </div>
          </div>
        </Card.Title>
        <Card.Body>
          <div className="b font-md py-1 mb-3 d-flex align-items-center">
            <Button variant="outline-light b"
              onClick={() => {
                setAllChecked(true);
              }}
            >
              <BtnBody icon="check-square" text="Select All" />
            </Button>

            <Button variant="outline-light b ml-3"
              onClick={(_e) => {
                setAllChecked(false);
              }}
              title="Deselect All"
              style={{ height: "100%" }}
            >
              <BtnBody icon="minus-square" text="Deselect All"/>
            </Button>
          </div>
          <div className="pl-4">
            {
              reposWithSecrets.repos.map((repoWithSecrets, i) => {
                const repoId = repoWithSecrets.repo.id;
                return (
                  <RepoWithSecretsItem key={i} repoWithSecrets={repoWithSecrets}
                    i={i}
                    checked={
                      checkedStates.repos.find(
                        (repo) => repo.owner === repoWithSecrets.repo.owner.login
                          && repo.name === repoWithSecrets.repo.name
                      )?.isChecked ?? false
                    }
                    defaultSecretNames={defaultSecretNames}
                    onCheckChanged={(checked: boolean) => { setChecked(repoId, checked); }}
                  />
                );
              })
            }
          </div>
        </Card.Body>
      </Card>

      <Card>
        <Card.Title>
          Create the Secrets
        </Card.Title>
        <Card.Body>
          <p>
            The secrets will be created in the repositories selected above.
          </p>
          <p>
            To each repository, two secrets will be added:
          </p>
          <ol>
            <li>
              <code>{reposWithSecrets.defaultSecretNames.clusterServerUrl}</code> will contain the URL to this OpenShift {"cluster's"} API server.
            </li>
            <li>
              <code>{reposWithSecrets.defaultSecretNames.token}</code> will
              contain the Service Account Token which can be used to log into the OpenShift API server.
            </li>
          </ol>
          <p>
            You can then use <ExternalLink href="https://github.com/redhat-actions/oc-login" className="b">
              oc-login
            </ExternalLink> to log into this cluster and run your OpenShift workflows.
          </p>
        </Card.Body>
      </Card>
    </React.Fragment>
  );
}

interface RepoItemProps {
  checked: boolean,
  defaultSecretNames: string[],
  i: number,
  onCheckChanged: (checked: boolean) => void,
  repoWithSecrets: ApiResponses.RepoSecrets["repos"][number],
}

function RepoWithSecretsItem({
  checked,
  defaultSecretNames,
  i,
  onCheckChanged,
  repoWithSecrets,
}: RepoItemProps): JSX.Element {

  const checkboxId = `check-${repoWithSecrets.repo.full_name}`;
  const collapsedSecretsId = `secrets-${i}`;

  const hasDefaultSecretWarning = defaultSecretNames.some(
    (defaultName) => repoWithSecrets.secrets.map((secret) => secret.name).includes(defaultName)
  );

  const [ isShowingSecrets, setIsShowingSecrets ] = useState(hasDefaultSecretWarning);

  return (
    <React.Fragment key={repoWithSecrets.repo.full_name}>
      <div className={
        classNames(
          "repo-secrets-summary form-check no-bullets py-3",
          "d-flex align-items-center justify-content-between"
          // { "bg-darker": i % 2 === 1 }
        )
      }>

        <input
          id={checkboxId} className="form-check-input"
          type="checkbox" checked={checked}
          onChange={(e) => {
            const newChecked = e.currentTarget.checked;
            console.log("setting checked status to " + newChecked);
            onCheckChanged(newChecked);
          }}
        />

        <div
          className={
            classNames("w-66 d-flex justify-content-between align-items-center")
          }
        >
          <label htmlFor={checkboxId} className="flex-grow-1 m-0 ml-3 clickable">
            {repoWithSecrets.repo.full_name}
          </label>

          <div className="d-flex align-items-center">
            <Button variant="outline-light"
              data-toggle="collapse"
              data-target={"#" + collapsedSecretsId}
              aria-expanded={!hasDefaultSecretWarning} area-controls={collapsedSecretsId}
              onClick={(_e) => { setIsShowingSecrets(!isShowingSecrets); }}
              style={{ width: ("Hide Secrets".length * 1.75) + "ch" }}
              // title={}
            >
              <BtnBody
                icon={isShowingSecrets ? "eye-slash" : "eye"}
                text={(isShowingSecrets ? "Hide" : "Show") + " Secrets"}
              />
            </Button>
          </div>

          <div className="ml-3">
            {hasDefaultSecretWarning
              ? getSecretNameWarning(
                repoWithSecrets.secrets
                  .map((secret) => secret.name)
                  .filter((secret) => defaultSecretNames.includes(secret))
              )
              : <FontAwesomeIcon className="text-success" icon="check-circle" title="No secrets will be overwritten." fixedWidth />
            }
          </div>
        </div>

        <div>
          <Button variant="outline-light"
            title="GitHub Repository"
          >
            <ExternalLink
              href={repoWithSecrets.repo.html_url}
              title="GitHub Repository"
            >
              <BtnBody icon={[ "fab", "github" ]} />
            </ExternalLink>
          </Button>

          <Button variant="outline-light" className="ml-2"
            title="Edit Secrets in GitHub"
          >
            <ExternalLink
              href={repoWithSecrets.repo.html_url + "/settings/secrets/actions"}
              title="Edit Secrets in GitHub"
            >
              <BtnBody icon="user-edit"/>
            </ExternalLink>
          </Button>
        </div>
      </div>

      <div id={collapsedSecretsId} className={classNames("collapse", { show: hasDefaultSecretWarning })}>
        {
          repoWithSecrets.secrets.length === 0
            ? <p>This repository has no Actions secrets.</p>
            : <ul className="bullets-disc">
              {
                repoWithSecrets.secrets.map((secret) => {
                  return (
                    <li
                      key={repoWithSecrets.repo.full_name + secret.name}
                      className="d-flex justify-content-between w-66"
                    >
                      <div className="d-flex">
                        <div>
                          <code>{secret.name}</code>
                        </div>
                        <div className="d-flex align-items-center ml-3">
                          {
                            // note that secret names are always uppercase
                            defaultSecretNames.includes(secret.name)
                              ? getSecretNameWarning([ secret.name ])
                              : ""
                          }
                        </div>
                      </div>
                      <div>
                        Last updated {getFriendlyDateTime(new Date(secret.updated_at))}
                      </div>
                    </li>
                  );
                })
              }
            </ul>
        }
      </div>
    </React.Fragment>
  );
}

function getSecretNameWarning(secretNames: string[]): JSX.Element {
  const msg = `Secret${secretNames.length === 1 ? "" : "s"} ${joinList(secretNames)} will be overwritten.`;

  return (
    <FontAwesomeIcon className="text-warning" icon="exclamation-triangle" title={msg} fixedWidth />
  );
}
